mutate(ave_speed = distance / air_time) %>%
group_by(dest) %>%
summarize(ave_speed = mean(ave_speed, na.rm = TRUE)) %>%
filter(ave_speed == max(ave_speed)) %>%
pull(dest)
View(delay_by_destinaiton)
highest_average_speed_destination <- flights %>%
mutate(ave_speed = distance / air_time) %>%
group_by(dest) %>%
summarize(ave_speed = mean(ave_speed, na.rm = TRUE))
highest_average_speed_destination <- flights %>%
mutate(ave_speed = distance / air_time) %>%
group_by(dest) %>%
summarize(ave_speed = mean(ave_speed, na.rm = TRUE))
View(highest_average_speed_destination)
highest_average_speed_destination <- flights %>%
mutate(ave_speed = distance / air_time) %>%
group_by(dest) %>%
summarize(ave_speed = mean(ave_speed, na.rm = TRUE)) %>%
filter(ave_speed = max(ave_speed))
highest_average_speed_destination <- flights %>%
mutate(ave_speed = distance / air_time) %>%
group_by(dest) %>%
summarize(ave_speed = mean(ave_speed, na.rm = TRUE)) %>%
filter(ave_speed == max(ave_speed))
View(highest_average_speed_destination)
print(max(highest_average_speed_destination, na.rm = TRUE))
print(max(highest_average_speed_destination$ave_speed))
print(max(highest_average_speed_destination$ave_speed))
highest_average_speed_destination <- flights %>%
mutate(ave_speed = distance / air_time) %>%
group_by(dest) %>%
summarize(ave_speed = mean(ave_speed, na.rm = TRUE))
print(max(highest_average_speed_destination$ave_speed))
print(mean(highest_average_speed_destination$ave_speed))
View(highest_average_speed_destination)
print(highest_average_speed_destination$ave_speed)
highest_average_speed_destination <- flights %>%
mutate(ave_speed = distance / air_time) %>%
group_by(dest) %>%
summarize(ave_speed = mean(ave_speed, na.rm = TRUE))
View(highest_average_speed_destination)
print(mean(highest_average_speed_destination$ave_speed, na.rm = TRUE)
print(mean(highest_average_speed_destination$ave_speed, na.rm = TRUE)
print(mean(highest_average_speed_destination$ave_speed, na.rm = TRUE))
highest_average_speed_destination <- flights %>%
mutate(ave_speed = distance / air_time) %>%
group_by(dest) %>%
summarize(ave_speed = mean(ave_speed, na.rm = TRUE))
highest_average_speed_destination <- flights %>%
mutate(ave_speed = distance / air_time) %>%
group_by(dest) %>%
summarize(ave_speed = mean(ave_speed, na.rm = TRUE)) %>%
filter(ave_speed == max(ave_speed, na.rm = TRUE))
View(highest_average_speed_destination)
highest_average_speed_destination <- flights %>%
mutate(ave_speed = distance / air_time) %>%
group_by(dest) %>%
summarize(ave_speed = mean(ave_speed, na.rm = TRUE)) %>%
filter(ave_speed == max(ave_speed, na.rm = TRUE)) %>%
pull(dest)
# You can look up these airports in the `airports` data frame!
head(airports)
# You can look up these airports in the `airports` data frame!
colnames(airports)
# Which city was flown to with the highest average speed?
colnames(flights)
# You can look up these airports in the `airports` data frame!
view(airports)
# You can look up these airports in the `airports` data frame!
View(airports)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
library("dplyr")
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
ave_arr_delay <- flights %>%
group_by(dest) %>%
summarize(arr_delay = mean(arr_delay, na.rm = TRUE))
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
ave_arr_delay <- flights %>%
group_by(dest) %>%
summarize(arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
rename(dest, faa)
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
ave_arr_delay <- flights %>%
group_by(dest) %>%
summarize(arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
rename(dest = "faa")
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
ave_arr_delay <- flights %>%
group_by(dest) %>%
summarize(arr_delay = mean(arr_delay, na.rm = TRUE))
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
ave_arr_delay <- flights %>%
group_by(dest) %>%
summarize(arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airports)
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
ave_arr_delay <- flights %>%
group_by(dest) %>%
summarize(arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(dest, airports$faa)
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
ave_arr_delay <- flights %>%
group_by(dest) %>%
summarize(arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airports, by = c("dest" = "faa"))
View(ave_arr_delay)
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
max_arr_delay <- flights %>%
group_by(dest) %>%
summarize(arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
filter(arr_delay == max(arr_delay)) %>%
pull()
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
max_arr_delay <- flights %>%
group_by(dest) %>%
summarize(arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
filter(arr_delay == max(arr_delay)) %>%
pull(dest)
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
max_arr_delay <- flights %>%
group_by(dest) %>%
summarize(arr_delay = mean(arr_delay, na.rm = TRUE))
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
max_arr_delay <- flights %>%
group_by(dest) %>%
summarize(arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
filter(arr_delay == max(arr_delay, na.rm = TRUE))
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
max_arr_delay <- flights %>%
group_by(dest) %>%
summarize(arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
filter(arr_delay == max(arr_delay, na.rm = TRUE)) %>%
pull(dest)
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
max_arr_delay <- flights %>%
group_by(dest) %>%
summarize(arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
filter(arr_delay == max(arr_delay, na.rm = TRUE)) %>%
pull(dest, arr_delay)
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
max_arr_delay <- flights %>%
group_by(dest) %>%
summarize(arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
filter(arr_delay == max(arr_delay, na.rm = TRUE)) %>%
head()
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
max_arr_delay <- flights %>%
group_by(dest) %>%
summarize(arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
filter(arr_delay == max(arr_delay, na.rm = TRUE)) %>%
head()
head(max_arr_delay)
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
max_arr_delay <- flights %>%
group_by(dest) %>%
summarize(arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
filter(arr_delay == max(arr_delay, na.rm = TRUE))
head(max_arr_delay)
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
max_arr_delay <- flights %>%
group_by(dest) %>%
summarize(arr_delay = mean(arr_delay, na.rm = TRUE))
View(max_arr_delay)
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
max_arr_delay <- flights %>%
group_by(dest) %>%
summarize(arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
filter(arr_delay == max(arr_delay, na.rm = TRUE)) %>%
pull(dest)
# Create a dataframe of the average arrival delay for each _airline_, then use
# `left_join()` to join on the "airlines" dataframe
# Which airline had the smallest average arrival delay?
ave_arr_delay <- flights %>%
group_by(dest) %>%
summarize(arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airports, by = c("dest" = "faa"))
View(ave_arr_delay)
min_arr_delay <- ave_arr_delay %>%
filter(arr_delay == min(arr_delay, na.rm = TRUE)) %>%
pull(name)
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
install.packages("ggplot2")
# Load the state data from
# "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv"
us-covid19 <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv")
# Load the state data from
# "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv"
us-covid19 <- read.csv(url("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv")
# Load the state data from
# "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv"
us-covid19 <- read.csv(
url("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv"))
# Load the state data from
# "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv"
us-covid19 <- read.csv(
url("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv"))
# Load the state data from
# "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv"
us-covid19 <- read.csv(
url("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv"))
# Load the state data from
# "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv"
us-covid19 <- read.csv(https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv)
# Load the state data from
# "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv"
us-covid19 <- read.csv(raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv)
# Load the state data from
# "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv"
us-covid19 <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv")
# Load the state data from
# "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv"
us_covid19 <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv")
View(us_covid19)
# Create a dataframe `wa_data` that is just data from Washington state
wa_data <- filter(us_covid19, us_covid19$state == "Washington")
View(wa_data)
# Create a `new_deaths` column that has new number of new deaths each day
wa_daily_comp <- mutate(wa_data, wa_data$date = wa_data$date - 1)
# Create a `new_deaths` column that has new number of new deaths each day
wa_data <- mutate(wa_data, new_deaths = deaths - lag(deaths))
View(wa_data)
# What day had the highest number of new deaths?
max_new_deaths <- max(wa_data$new_deaths, na.rm = TRUE)
# What day had the highest number of new deaths?
max_new_deaths <- wa_data %>%
filter(new_deaths == max(new_deaths, na.rm = TRUE)) %>%
pull(date)
# What is the fewest number of new deaths in a day?
min_new_deaths <- wa_data %>%
filter(new_deaths == min(new_deaths, na.rm = TRUE)) %>%
pull(date)
# What day had the highest number of new deaths?
max_new_deaths <- wa_data %>%
filter(new_deaths == max(new_deaths, na.rm = TRUE)) %>%
pull(date, new_deaths)
# What is the fewest number of new deaths in a day?
min_new_deaths <- wa_data %>%
filter(new_deaths == min(new_deaths, na.rm = TRUE)) %>%
pull(date, new_deaths)
# What is the fewest number of new deaths in a day?
min_new_deaths <- wa_data %>%
filter(new_deaths == min(new_deaths, na.rm = TRUE)) %>%
pull(new_deaths)
# What is the fewest number of new deaths in a day?
min_new_deaths <- wa_data %>%
filter(new_deaths == min(new_deaths, na.rm = TRUE)) %>%
pull(date, new_deaths)
# Pass the new_deaths column from wa_data to the plot function
plot(wa_data$new_deaths)
install.packages("rsconnect")
library("rsconnect")
rsconnect::setAccountInfo(name='brendankeane', token='8999C0CD6AA3FA370D540B09C9A9A51C', secret='utMfLT0JYE3cr7gGVLeV9b8fiaeApuIyreePpGk0')
# Downloading raw data
co2_data <- read.csv("https://raw.githubusercontent.com/owid/co2-data/master/owid-co2-data.csv")
View(co2_data)
co2_data_past25 <- co2_data %>%
filter(year > 1995)
library("dplyr")
# Downloading raw data
co2_data <- read.csv("https://raw.githubusercontent.com/owid/co2-data/master/owid-co2-data.csv")
co2_data_past25 <- co2_data %>%
filter(year > 1995)
View(co2_data_past25)
co2_data_past25 <- co2_data %>%
filter(year > 1995) %>%
group_by(country) %>%
unique()
View(co2_data_past25)
co2_data_past25 <- co2_data %>%
filter(year > 1995) %>%
group_by(country) %>%
unique()
co2_data_past25 <- co2_data %>%
filter(year > 1995) %>%
group_by(year) %>%
unique()
View(co2_data_past25)
?group_by
co2_data_past25 <- co2_data %>%
filter(year > 1995) %>%
group_by(country) %>%
mutate(co2 = mean(co2, na.rm = TRUE))
co2_data_past25 <- co2_data %>%
filter(year > 1995) %>%
group_by(country) %>%
mutate(co2 = mean(co2, na.rm = TRUE)) %>%
unique()
View(co2_data_past25)
co2_data_past25 <- co2_data %>%
filter(year == 2008)
View(co2_data_past25)
shiny::runApp('Desktop/22W/Info201/a4-brendanwilliam')
co2_since_1950 <- table("CO2" = round(co2_2018$mean_i / co2_1950$mean_i, 3),
"Population" = round(co2_2018$mean_n / co2_1950$mean_n, 3),
"GDP/Population" = round(co2_2018$mean_p / co2_1950$mean_p, 3),
"CO2/GDP" = round(co2_2018$mean_e / co2_1950$mean_e, 3))
co2_since_2000 <- table("CO2" = round(co2_2018$mean_i / co2_2000$mean_i, 3),
"Population" = round(co2_2018$mean_n / co2_2000$mean_n, 3),
"GDP/Population" = round(co2_2018$mean_p / co2_2000$mean_p, 3),
"CO2/GDP" = round(co2_2018$mean_e / co2_2000$mean_e, 3))
print(co2_since_1950)
print(co2_since_2000)
print(co2_since_1950)
print(co2_since_2000)
runApp('Desktop/22W/Info201/a4-brendanwilliam')
?table
runApp('Desktop/22W/Info201/a4-brendanwilliam')
runApp('Desktop/22W/Info201/a4-brendanwilliam')
co2_since_1950 <- table(list("CO2" = round(co2_2018$mean_i / co2_1950$mean_i, 3),
"Population" = round(co2_2018$mean_n / co2_1950$mean_n, 3),
"GDP/Population" = round(co2_2018$mean_p / co2_1950$mean_p, 3),
"CO2/GDP" = round(co2_2018$mean_e / co2_1950$mean_e, 3)))
co2_since_2000 <- table(list("CO2" = round(co2_2018$mean_i / co2_2000$mean_i, 3),
"Population" = round(co2_2018$mean_n / co2_2000$mean_n, 3),
"GDP/Population" = round(co2_2018$mean_p / co2_2000$mean_p, 3),
"CO2/GDP" = round(co2_2018$mean_e / co2_2000$mean_e, 3)))
print(co2_since_1950)
print(co2_since_2000)
co2_since_1950 <- table(list("CO2" = round(co2_2018$mean_i / co2_1950$mean_i, 3),
"Population" = round(co2_2018$mean_n / co2_1950$mean_n, 3),
"GDP/Population" = round(co2_2018$mean_p / co2_1950$mean_p, 3),
"CO2/GDP" = round(co2_2018$mean_e / co2_1950$mean_e, 3)))
co2_since_2000 <- table(list("CO2" = round(co2_2018$mean_i / co2_2000$mean_i, 3),
"Population" = round(co2_2018$mean_n / co2_2000$mean_n, 3),
"GDP/Population" = round(co2_2018$mean_p / co2_2000$mean_p, 3),
"CO2/GDP" = round(co2_2018$mean_e / co2_2000$mean_e, 3)))
print(co2_since_1950)
print(co2_since_2000)
runApp('Desktop/22W/Info201/a4-brendanwilliam')
co2_since_1950 <- as.data.frame("CO2" = round(co2_2018$mean_i / co2_1950$mean_i, 3),
"Population" = round(co2_2018$mean_n / co2_1950$mean_n, 3),
"GDP/Population" = round(co2_2018$mean_p / co2_1950$mean_p, 3),
"CO2/GDP" = round(co2_2018$mean_e / co2_1950$mean_e, 3))
co2_since_1950 <- as.data.frame("CO2" = round(co2_2018$mean_i / co2_1950$mean_i, 3),
"Population" = round(co2_2018$mean_n / co2_1950$mean_n, 3),
"GDP/Population" = round(co2_2018$mean_p / co2_1950$mean_p, 3),
"CO2/GDP" = round(co2_2018$mean_e / co2_1950$mean_e, 3))
?data.frame
co2_1950_num <- c(round(co2_2018$mean_i / co2_1950$mean_i, 3),
round(co2_2018$mean_n / co2_1950$mean_n, 3),
round(co2_2018$mean_p / co2_1950$mean_p, 3),
round(co2_2018$mean_e / co2_1950$mean_e, 3))
co2_2000_num <- c(round(co2_2018$mean_i / co2_2000$mean_i, 3),
round(co2_2018$mean_n / co2_2000$mean_n, 3),
round(co2_2018$mean_p / co2_2000$mean_p, 3),
round(co2_2018$mean_e / co2_2000$mean_e, 3))
co2_labels <- c("CO2", "Population", "GDP per capita", "CO2 per GDP")
co2_since_1950 <- data.frame(co2_labels, co2_1950_num)
View(co2_since_1950)
co2_since_1950 <- data.frame(co2_labels, co2_1950_num, stringsAsFactors = FALSE)
View(co2_since_1950)
co2_1950_num <- c(round(100 * co2_2018$mean_i / co2_1950$mean_i),
round(100 * co2_2018$mean_n / co2_1950$mean_n),
round(100 * co2_2018$mean_p / co2_1950$mean_p),
round(100 * co2_2018$mean_e / co2_1950$mean_e))
co2_2000_num <- c(round(100 * co2_2018$mean_i / co2_2000$mean_i),
round(100 * co2_2018$mean_n / co2_2000$mean_n),
round(100 * co2_2018$mean_p / co2_2000$mean_p),
round(100 * co2_2018$mean_e / co2_2000$mean_e))
co2_labels <- c("CO2", "Population", "GDP per capita", "CO2 per GDP") %>%
rename("co2_1950_num" = "Percent Growth")
co2_labels <- c("CO2", "Population", "GDP per capita", "CO2 per GDP") %>%
rename("Percent Growth" = "co2_1950_num")
co2_labels <- c("CO2", "Population", "GDP per capita", "CO2 per GDP")
co2_since_1950 <- data.frame(co2_labels, co2_1950_num) %>%
rename("Percent Growth" = "co2_1950_num")
View(co2_since_1950)
co2_since_1950 <- data.frame(co2_labels, co2_1950_num) %>%
rename("Percent Growth" = "co2_1950_num", "Impact Factor", "co2_labels")
co2_since_1950 <- data.frame(co2_labels, co2_1950_num) %>%
rename("Percent Growth" = "co2_1950_num", "Impact Factor" = "co2_labels")
co2_since_2000 <- data.frame(co2_labels, co2_2000_num) %>%
rename("Percent Growth" = "co2_2000_num", "Impact Factor" = "co2_labels")
View(co2_since_2000)
runApp('Desktop/22W/Info201/a4-brendanwilliam')
runApp('Desktop/22W/Info201/a4-brendanwilliam')
runApp('Desktop/22W/Info201/a4-brendanwilliam')
runApp('Desktop/22W/Info201/a4-brendanwilliam')
?a
runApp('Desktop/22W/Info201/a4-brendanwilliam')
runApp('Desktop/22W/Info201/a4-brendanwilliam')
runApp('Desktop/22W/Info201/a4-brendanwilliam')
source("~/Desktop/22W/Info201/a4-brendanwilliam/app_ui.R")
runApp('Desktop/22W/Info201/a4-brendanwilliam')
runApp('Desktop/22W/Info201/a4-brendanwilliam')
runApp('Desktop/22W/Info201/a4-brendanwilliam')
runApp('Desktop/22W/Info201/a4-brendanwilliam')
runApp('Desktop/22W/Info201/a4-brendanwilliam')
runApp('Desktop/22W/Info201/a4-brendanwilliam')
runApp('Desktop/22W/Info201/a4-brendanwilliam')
runApp('Desktop/22W/Info201/a4-brendanwilliam')
runApp('Desktop/22W/Info201/a4-brendanwilliam')
runApp('Desktop/22W/Info201/a4-brendanwilliam')
runApp('Desktop/22W/Info201/a4-brendanwilliam')
install.packages("languageserver")
install.packages("jsonlite")
install.packages("rlang")
# Loading all data
ga_full_raw <- read.csv('germanamerican-newsdata.csv')
?setwd()
setwd("~/Desktop/germanamericanbund-news-research/data")
getwd()
setwd("~/Desktop/germanamericanbund-news-research/data")
# Loading all data
ga_full_raw <- read.csv('germanamerican-newsdata.csv')
ga_kuhn_raw <- read.csv('germanamericanANDkuhn-newsdata.csv')
ga_nazi_raw <- read.csv('germanamericanANDnazi-newsdata.csv')
# Marking Kuhn and Nazi data
ga_kuhn <- ga_kuhn_raw %>%
mutate(isKuhn = TRUE)
# Libraries
library(dplyr)
library(lubridate)
library(rjson)
# Loading all data
ga_full_raw <- read.csv('germanamerican-newsdata.csv')
ga_kuhn_raw <- read.csv('germanamericanANDkuhn-newsdata.csv')
ga_nazi_raw <- read.csv('germanamericanANDnazi-newsdata.csv')
# Marking Kuhn and Nazi data
ga_kuhn <- ga_kuhn_raw %>%
mutate(isKuhn = TRUE)
ga_nazi <- ga_nazi_raw %>%
mutate(isNazi = TRUE)
# Wrangling all data into usable format and saving as a .csv
ga_full <- full_join(ga_full_raw, ga_kuhn) %>%  # Merging Kuhn data
full_join(ga_nazi) %>%  # Merging Nazi data
replace(is.na(.), FALSE) %>%
mutate(dateform = as.Date(pubdate, '%b %d, %Y')) %>% # Reformatting dates
mutate(date = as.character(dateform)) %>%
mutate(weekday = format(dateform, '%a')) %>%
mutate(pubtitle = gsub("\\s*\\([^\\)]+\\)", "", pubtitle)) %>%  # Eliminating years from newspaper titles
select(Title, Abstract, isKuhn, isNazi, date, weekday, StoreId,
issn, startPage, placeOfPublication, pubtitle, DocumentURL,
FindACopy) %>%
arrange(ymd(date))
ga_full_json = toJSON(ga_full)
View(ga_kuhn_raw)
# Wrangling all data into usable format and saving as a .csv
ga_full <- full_join(ga_full_raw, ga_kuhn) %>%  # Merging Kuhn data
full_join(ga_nazi) %>%  # Merging Nazi data
replace(is.na(.), FALSE) %>%
mutate(dateform = as.Date(pubdate, '%b %d, %Y')) %>% # Reformatting dates
mutate(date = as.character(dateform)) %>%
mutate(weekday = format(dateform, '%a')) %>%
mutate(pubtitle = gsub("\\s*\\([^\\)]+\\)", "", pubtitle)) %>%  # Eliminating years from newspaper titles
select(Title, Abstract, documentType, isKuhn, isNazi, date, weekday, StoreId,
issn, startPage, placeOfPublication, pubtitle, DocumentURL,
FindACopy) %>%
arrange(ymd(date))
ga_full_json = toJSON(ga_full)
write(ga_full_json, 'germanamerican-newsdata-full.json')
write.csv(ga_full, 'germanamerican-newsdata-full.csv')
View(ga_full)
